{"version":3,"sources":["apis/tracer/index.js","common/settings.js","components/AlgsList/index.js","common/utils.js","components/ChartRender/index.js","components/InputData/index.js","components/App/index.js","serviceWorker.js","index.js"],"names":["Element","value","patched","selected","this","Array1DTracer","arr","x","unsortedArr","Array","from","i","steps","currentStepIndex","v","sx","ex","length","newArr","set","push","CHART_SETTINGS","PLAYER_SETTINGS","DEFAULT_ALGS","AlgsList","props","algs","nextProps","currentAlgTitle","algsList","Object","keys","map","item","key","onClick","handleSetAlg","className","React","Component","randomArr","to","array","j","Math","floor","random","shuffleArr","getTextWidth","text","font","context","canvas","document","createElement","getContext","measureText","width","ChartRender","state","fontLoaded","FontFaceObserver","load","then","setState","bind","barPieceHeight","currentStep","stageRef","createRef","nextState","playing","builded","stepsCount","speed","ref","height","curr","barHeight","toString","y","fill","onMouseOver","handleBarOver","onMouseOut","handleBarOut","cornerRadius","fontSize","fontFamily","disabled","pause","resume","handleBuildCode","type","onChange","e","setStep","Number","parseInt","target","min","max","setSpeed","InputData","el","window","AceEditor","placeholder","mode","theme","name","handleEditorChange","showPrintMargin","showGutter","highlightActiveLine","setOptions","showLineNumbers","tabSize","App","codeText","editor","getValue","funcFromCode","Function","tracer","console","error","message","alg","setValue","next","prev","interval","timer","setTimeout","clearTimeout","undefined","Boolean","location","hostname","match","ReactDOM","render","algVisApp","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.541553bc.chunk.js","sourcesContent":["class Element {\r\n  constructor(value, patched = false, selected = false) {\r\n    this.value = value;\r\n    this.patched = patched;\r\n    this.selected = selected;\r\n  }\r\n}\r\n\r\nclass Array1DTracer {\r\n  constructor(arr, x = 0) {\r\n    this.unsortedArr = Array.from(arr, i => new Element(i));\r\n    this.steps = [\r\n      this.unsortedArr,\r\n      Array.from(\r\n        this.unsortedArr,\r\n        i => new Element(i.value, i.patched, i.selected)\r\n      )\r\n    ];\r\n    this.currentStepIndex = x + 1;\r\n  }\r\n\r\n  patch(x, v = this.steps[this.currentStepIndex][x].value) {\r\n    this.steps[this.currentStepIndex][x].value = v;\r\n    this.steps[this.currentStepIndex][x].patched = true;\r\n  }\r\n\r\n  depatch(x) {\r\n    this.steps[this.currentStepIndex][x].patched = false;\r\n  }\r\n\r\n  select(sx, ex = sx) {\r\n    for (let x = sx; x <= ex; x++) {\r\n      this.steps[this.currentStepIndex][x].selected = true;\r\n    }\r\n  }\r\n\r\n  deselect(sx, ex = sx) {\r\n    for (let x = sx; x <= ex; x++) {\r\n      this.steps[this.currentStepIndex][x].selected = false;\r\n    }\r\n  }\r\n\r\n  set(arr) {\r\n    for (let x = 0; x < arr.length; x++) {\r\n      this.steps[this.currentStepIndex][x].value = arr[x];\r\n    }\r\n  }\r\n\r\n  delay(newArr) {\r\n    this.set(newArr);\r\n    this.steps.push(\r\n      Array.from(\r\n        this.steps[this.currentStepIndex],\r\n        i => new Element(i.value, i.patched, i.selected)\r\n      )\r\n    );\r\n    this.currentStepIndex++;\r\n  }\r\n}\r\n\r\nexport { Array1DTracer };\r\n","const CHART_SETTINGS = {\r\n  width: 600,\r\n  height: 300,\r\n  offsetX: 10,\r\n  barPadding: 30,\r\n  barWidth: 5,\r\n  barRadius: 10,\r\n  barMult: 5\r\n};\r\n\r\n\r\nconst PLAYER_SETTINGS = {\r\n  time: 1000,\r\n  speed: 5\r\n};\r\n\r\nconst ARR_LENGTH = 20;\r\n\r\nconst DEFAULT_ALGS = {\r\n  \"Bubble Sort\": `let N = arr.length;\r\nlet swapped;\r\ndo {\r\n  swapped = false;\r\n  // visualize {\r\n  tracer.select(N - 1);\r\n  tracer.delay(arr);\r\n  // }\r\n  for (let i = 1; i < N; i++) {\r\n    // visualize {\r\n    tracer.select(i);\r\n    tracer.delay(arr);\r\n    // }\r\n    if (arr[i - 1] > arr[i]) {\r\n      const temp = arr[i - 1];\r\n      arr[i - 1] = arr[i];\r\n      arr[i] = temp;\r\n      swapped = true;\r\n      // visualize {\r\n      tracer.patch(i - 1, arr[i - 1]);\r\n      tracer.patch(i, arr[i]);\r\n      tracer.delay(arr);\r\n      tracer.depatch(i - 1);\r\n      tracer.depatch(i);\r\n      // }\r\n    }\r\n    // visualize {\r\n    tracer.deselect(i);\r\n    // }\r\n  }\r\n  \r\n  // visualize {\r\n  tracer.deselect(N - 1);\r\n  // }\r\n  N--;\r\n} while (swapped);`,\r\n\r\n  \"Insertion Sort\": `for (let i = 1; i < arr.length; i++) {\r\n  const key = arr[i];\r\n  // visualize {\r\n  tracer.select(i);\r\n  tracer.delay(arr);\r\n  // }\r\n  let j;\r\n  for (j = i - 1; (j >= 0) && (arr[j] > key); j--) {\r\n    arr[j + 1] = arr[j];\r\n    // visualize {\r\n    tracer.patch(j + 1, arr[j + 1]);\r\n    tracer.delay(arr);\r\n    tracer.depatch(j + 1);\r\n    // }\r\n  }\r\n  arr[j + 1] = key;\r\n  // visualize {\r\n  tracer.patch(j + 1, arr[j + 1]);\r\n  tracer.delay(arr);\r\n  tracer.depatch(j + 1);\r\n  tracer.deselect(i);\r\n  // }\r\n}`,\r\n\r\n  \"Quick Sort\": `function partition(arr, low, high) {\r\n  let i;\r\n  let j;\r\n  let s;\r\n  while (high > low) {\r\n    i = low;\r\n    j = high;\r\n    s = arr[low];\r\n    while (i < j) {\r\n      // visualize {\r\n      tracer.select(high);\r\n      tracer.select(low);\r\n      tracer.delay(arr);\r\n      // }\r\n      while (arr[j] > s) {\r\n        // visualize {\r\n        tracer.select(j);\r\n        tracer.delay(arr);\r\n        tracer.deselect(j);\r\n        // }\r\n        j--;\r\n      }\r\n      arr[i] = arr[j];\r\n      // visualize {\r\n      tracer.patch(i, arr[j]);\r\n      tracer.delay(arr);\r\n      tracer.depatch(i);\r\n      // }\r\n      while (s >= arr[i] && i < j) {\r\n        // visualize {\r\n        tracer.select(i);\r\n        tracer.delay(arr);\r\n        tracer.deselect(i);\r\n        // }\r\n        i++;\r\n      }\r\n      arr[j] = arr[i];\r\n      // visualize {\r\n      tracer.patch(j, arr[i]);\r\n      tracer.delay(arr);\r\n      tracer.depatch(j);\r\n      tracer.deselect(high);\r\n      tracer.deselect(low);\r\n      // }\r\n    }\r\n    arr[i] = s;\r\n    // visualize {\r\n    tracer.patch(i, s);\r\n    tracer.delay(arr);\r\n    tracer.depatch(i);\r\n    // }\r\n    partition(arr, low, i - 1);\r\n    low = i + 1;\r\n  }\r\n}\r\n\r\nfunction quicksort(arr) {\r\n  partition(arr, 0, arr.length - 1);\r\n}\r\n\r\nquicksort(arr);`\r\n}\r\n\r\nconst DEFAULT_ALG = \"Bubble Sort\";\r\n\r\nexport { CHART_SETTINGS, ARR_LENGTH, PLAYER_SETTINGS, DEFAULT_ALGS, DEFAULT_ALG };\r\n","import React from \"react\";\r\nimport { DEFAULT_ALGS } from \"common/settings\";\r\nimport \"./AlgsList.scss\";\r\n\r\nclass AlgsList extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.algs = DEFAULT_ALGS;\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps) {\r\n    return this.props.currentAlgTitle !== nextProps.currentAlgTitle;\r\n  }\r\n\r\n  render() {\r\n    const algsList = Object.keys(this.algs).map(item => (\r\n      <li\r\n        key={item}\r\n        onClick={() => this.props.handleSetAlg(item)}\r\n        className={\r\n          item === this.props.currentAlgTitle\r\n            ? \"algs-list__item algs-list__item_active\"\r\n            : \"algs-list__item\"\r\n        }\r\n      >\r\n        {item}\r\n      </li>\r\n    ));\r\n\r\n    return (\r\n      <section className=\"algs\">\r\n        <ul className=\"algs-list\">{algsList}</ul>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AlgsList;\r\n","import { ARR_LENGTH } from \"common/settings\";\r\n\r\nfunction shuffleArr(array) {\r\n  for (let i = array.length - 1; i > 0; i--) {\r\n    let j = Math.floor(Math.random() * (i + 1));\r\n    [array[i], array[j]] = [array[j], array[i]];\r\n  }\r\n}\r\n\r\nfunction randomArr(from, to) {\r\n  let arr = [];\r\n\r\n  for (let i = from || 1; i <= ((to - from) || ARR_LENGTH); ++i) {\r\n      arr.push(i);\r\n  }\r\n  shuffleArr(arr);\r\n \r\n  return arr;\r\n}\r\n\r\nfunction getTextWidth(text, font) {\r\n  // re-use canvas object for better performance\r\n  var canvas = getTextWidth.canvas || (getTextWidth.canvas = document.createElement(\"canvas\"));\r\n  var context = canvas.getContext(\"2d\");\r\n  context.font = font;\r\n  var metrics = context.measureText(text);\r\n  return metrics.width;\r\n}\r\n\r\nexport { shuffleArr, randomArr, getTextWidth };\r\n","import React from \"react\";\r\nimport { CHART_SETTINGS } from \"common/settings\";\r\nimport { getTextWidth } from \"common/utils\";\r\nimport { Stage, Layer, Rect, Text } from \"react-konva\";\r\nimport FontFaceObserver from \"fontfaceobserver\";\r\n\r\nimport \"./ChartRender.scss\";\r\n\r\nclass ChartRender extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      fontLoaded: false\r\n    };\r\n\r\n    let font = new FontFaceObserver(\"PFDinMono\");\r\n    font.load().then(\r\n      function() {\r\n        this.setState({ fontLoaded: true });\r\n      }.bind(this)\r\n    );\r\n\r\n    this.barPieceHeight = Math.floor(\r\n      (CHART_SETTINGS.height / this.props.currentStep.length) * 0.8\r\n    );\r\n\r\n    this.stageRef = React.createRef();\r\n  }\r\n\r\n  shouldComponentUpdate(nextProps, nextState) {\r\n    return (\r\n      this.props.currentStepIndex !== nextProps.currentStepIndex ||\r\n      this.props.playing !== nextProps.playing ||\r\n      this.props.builded !== nextProps.builded ||\r\n      this.props.stepsCount !== nextProps.stepsCount ||\r\n      this.props.speed !== nextProps.speed ||\r\n      this.state.fontLoaded !== nextState.fontLoaded\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"charts\">\r\n        <div className=\"charts-convas\">\r\n          <Stage\r\n            ref={this.stageRef}\r\n            width={CHART_SETTINGS.width}\r\n            height={CHART_SETTINGS.height}\r\n          >\r\n            <Layer>\r\n              {this.props.currentStep.map((item, curr) => {\r\n                let barHeight = item.value * this.barPieceHeight;\r\n                return [\r\n                  <Rect\r\n                    key={item.value.toString() + \"~\" + curr.toString()}\r\n                    x={\r\n                      CHART_SETTINGS.offsetX + curr * CHART_SETTINGS.barPadding\r\n                    }\r\n                    y={CHART_SETTINGS.height - barHeight - 23}\r\n                    width={CHART_SETTINGS.barWidth}\r\n                    height={barHeight}\r\n                    fill={\r\n                      item.patched\r\n                        ? \"#FF417B\"\r\n                        : item.selected\r\n                        ? \"#6641FF\"\r\n                        : \"white\"\r\n                    }\r\n                    item={item.value}\r\n                    onMouseOver={this.handleBarOver}\r\n                    onMouseOut={this.handleBarOut}\r\n                    cornerRadius={CHART_SETTINGS.barRadius}\r\n                  ></Rect>,\r\n                  <Text\r\n                    text={item.value}\r\n                    fill={\"#7E7E7E\"}\r\n                    x={\r\n                      CHART_SETTINGS.offsetX +\r\n                      curr * CHART_SETTINGS.barPadding -\r\n                      (Math.floor(\r\n                        getTextWidth(\r\n                          item.value,\r\n                          \"normal normal 12px PFDinMono\"\r\n                        ) / 2\r\n                      ) -\r\n                        Math.floor(CHART_SETTINGS.barWidth / 2))\r\n                    }\r\n                    y={CHART_SETTINGS.height - 12}\r\n                    fontSize={12}\r\n                    fontFamily={this.state.fontLoaded ? \"PFDinMono\" : \"Arial\"}\r\n                  />\r\n                ];\r\n              })}\r\n            </Layer>\r\n          </Stage>\r\n        </div>\r\n\r\n        <div className=\"charts-btns-wrapper\">\r\n          <div className=\"charts-btns\">\r\n            <button\r\n              disabled={!this.props.builded}\r\n              onClick={\r\n                this.props.playing ? this.props.pause : this.props.resume\r\n              }\r\n              className={\r\n                this.props.playing\r\n                  ? \"charts-btns__btn charts-btns__btn_pause\"\r\n                  : \"charts-btns__btn charts-btns__btn_start\"\r\n              }\r\n            >\r\n              {this.props.playing ? \"Pause\" : \"Start\"}\r\n            </button>\r\n            <button\r\n              disabled={this.props.builded}\r\n              onClick={this.props.handleBuildCode}\r\n              className={\r\n                this.props.builded\r\n                  ? \"charts-btns__btn charts-btns__btn_checkmark\"\r\n                  : \"charts-btns__btn charts-btns__btn_stop\"\r\n              }\r\n            >\r\n              {this.props.builded ? \"Builded\" : \"Build\"}\r\n            </button>\r\n\r\n            <div className=\"charts-btns__longrangewrap\">\r\n              <span className=\"charts-btns__longrangetitle\">\r\n                {this.props.currentStepIndex + 1}/{this.props.stepsCount}\r\n              </span>\r\n              <input\r\n                type=\"range\"\r\n                className=\"charts-btns__longrange\"\r\n                onChange={e =>\r\n                  this.props.setStep(Number.parseInt(e.target.value) - 1)\r\n                }\r\n                value={this.props.currentStepIndex + 1}\r\n                min=\"1\"\r\n                max={this.props.stepsCount}\r\n              ></input>\r\n            </div>\r\n\r\n            <div className=\"charts-btns__rangewrap\">\r\n              <span className=\"charts-btns__rangelbl\">Speed</span>\r\n              <div className=\"charts-btns__rangeinnerwrap\">\r\n                <input\r\n                  type=\"range\"\r\n                  className=\"charts-btns__range\"\r\n                  onChange={e => this.props.setSpeed(e.target.value)}\r\n                  value={this.props.speed}\r\n                  min=\"1\"\r\n                  max=\"10\"\r\n                ></input>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChartRender;\r\n","import React from \"react\";\r\nimport AceEditor from \"react-ace\";\r\n\r\nimport \"ace-builds/src-noconflict/mode-javascript\";\r\nimport \"ace-builds/src-noconflict/theme-twilight\";\r\nimport \"./InputData.scss\";\r\n\r\nclass InputData extends React.Component {\r\n  shouldComponentUpdate(nextProps) {\r\n    return false;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"input-data\">\r\n        <AceEditor\r\n          ref={el => window.AceEditor = el}\r\n          placeholder=\"Write your code here\"\r\n          mode=\"javascript\"\r\n          theme=\"twilight\"\r\n          name=\"blah2\"\r\n          fontSize={14}\r\n          width=\"100%\"\r\n          height=\"100vh\"\r\n          onChange={this.props.handleEditorChange}\r\n          showPrintMargin={true}\r\n          showGutter={true}\r\n          highlightActiveLine={true}\r\n          setOptions={{\r\n            showLineNumbers: true,\r\n            tabSize: 2\r\n          }}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default InputData;\r\n","import React from \"react\";\nimport \"./App.scss\";\n\nimport { Array1DTracer } from \"apis\";\nimport { AlgsList, ChartRender, InputData } from \"components\";\nimport { randomArr } from \"common/utils\";\nimport { PLAYER_SETTINGS, DEFAULT_ALGS, DEFAULT_ALG } from \"common/settings\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.unsortedArr = randomArr();\n    this.tracer = new Array1DTracer(this.unsortedArr);\n\n    this.state = {\n      currentStepIndex: 0,\n      currentAlgTitle: DEFAULT_ALG,\n      speed: PLAYER_SETTINGS.speed,\n      playing: false,\n      builded: false\n    };\n\n    this.handleBuildCode = this.handleBuildCode.bind(this);\n    this.handleSetAlg = this.handleSetAlg.bind(this);\n\n    this.setStep = this.setStep.bind(this);\n    this.setSpeed = this.setSpeed.bind(this);\n    this.next = this.next.bind(this);\n    this.prev = this.prev.bind(this);\n    this.resume = this.resume.bind(this);\n    this.pause = this.pause.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleSetAlg(DEFAULT_ALG);\n  }\n\n  handleBuildCode = () => {\n    let codeText = window.AceEditor.editor.getValue();\n    try {\n      // eslint-disable-next-line no-new-func\n      let funcFromCode = new Function(\"tracer\", \"arr\", codeText);\n      this.tracer = new Array1DTracer(this.unsortedArr);\n      funcFromCode(this.tracer, [...this.unsortedArr]);\n      this.setState({ currentStepIndex: 0, builded: true });\n    } catch (e) {\n      console.error(e.message);\n    }\n  };\n\n  handleSetAlg = alg => {\n    window.AceEditor.editor.setValue(DEFAULT_ALGS[alg], 1);\n    this.handleBuildCode();\n    this.setState({ currentAlgTitle: alg, currentStepIndex: 0 });\n  };\n\n  handleEditorChange = () => {\n    this.setState({ builded: false, playing: false });\n  };\n\n  setStep(i) {\n    this.setState({\n      currentStepIndex: i\n    });\n  }\n\n  setSpeed(speed) {\n    this.setState({ speed: speed });\n  }\n\n  next() {\n    this.pause();\n    if (this.state.currentStepIndex >= this.tracer.steps.length - 1)\n      return false;\n    this.setStep(this.state.currentStepIndex + 1);\n    return true;\n  }\n\n  prev() {\n    this.pause();\n    if (this.state.currentStepIndex <= 0) return false;\n    this.setStep(this.state.currentStepIndex - 1);\n    return true;\n  }\n\n  resume() {\n    this.pause();\n    if (this.next()) {\n      const interval = PLAYER_SETTINGS.time / this.state.speed;\n      this.timer = window.setTimeout(this.resume, interval);\n      this.setState({ playing: true });\n    }\n  }\n\n  pause() {\n    if (this.timer) {\n      window.clearTimeout(this.timer);\n      this.timer = undefined;\n      this.setState({ playing: false });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AlgsList\n          currentAlgTitle={this.state.currentAlgTitle}\n          handleSetAlg={this.handleSetAlg}\n        />\n        <ChartRender\n          handleBuildCode={this.handleBuildCode}\n          speed={this.state.speed}\n          currentStepIndex={this.state.currentStepIndex}\n          currentStep={this.tracer.steps[this.state.currentStepIndex]}\n          stepsCount={this.tracer.steps.length}\n          setSpeed={this.setSpeed}\n          setStep={this.setStep}\n          resume={this.resume}\n          pause={this.pause}\n          prev={this.prev}\n          playing={this.state.playing}\n          builded={this.state.builded}\n        />\n        <InputData handleEditorChange={this.handleEditorChange} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport \"./index.scss\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <App\n    ref={algVisApp => {\n      window.algVisApp = algVisApp;\n    }}\n  />,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}